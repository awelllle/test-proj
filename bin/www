#!/usr/bin/env node
/**
 * Module dependencies.
 */

var app = require('../server');
var http = require('http');
var mqtt = require('mqtt');
const mongoose = require('mongoose');
const Request = mongoose.model('Request');


var options = {
  port: 8883,
  username: 'kogora',
  password: 'kogoradev',
};

let client = mqtt.connect('mqtts://www.dev.digitalacre.io', options);

client.on('connect', function () {
  console.log("connected");
 

  client.subscribe('accept', function (err) {
    if (!err) {
     
    }
  })


  client.on('message', function (topic, message) {
 
    let jsonMessage =  JSON.parse(message);
    console.log(jsonMessage, "aaaa");

    id = new ObjectId(jsonMessage.requestId);

    Request.updateOne(
      { _id :id}, {
      $set: {

          agent : jsonMessage.phone,
          status : "accepted"
          
      },
  }, (err, updated) => {
     
      if (err) {
          console.log(err);
         
      }

      console.log("request accepted");
    
  });
    
  })



})



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('server listenting on port ' + port);
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
 
}
